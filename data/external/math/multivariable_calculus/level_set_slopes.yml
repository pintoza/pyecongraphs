---
schema: EconSchema
version: 1
aspectRatio: 2
params:
  - name: x
    value: 1
    min: 1
    max: 9
    round: 0.1
  - name: y
    value: 5
    min: 1
    max: 9
    round: 0.1
  - name: f
    value: 0
calcs:
  z1: (4*sqrt(params.x)*params.y)
  z2: (2*params.x + 4*params.y)
  z3: (params.x*params.x + params.y*params.y)
  z: "((params.f == 0) ? calcs.z1 : (params.f == 1) ? calcs.z2 : calcs.z3)"
  x1: ((calcs.z/4)^(2/3))
  x2: (calcs.z/6)
  x3: (sqrt(calcs.z/2))
  x: "((params.f == 0) ? calcs.x1 : (params.f == 1) ? calcs.x2 : calcs.x3)"
  m1: (params.y/(2*params.x))
  m2: (0.5)
  m3: (params.x/params.y)
  m: "((params.f == 0) ? calcs.m1 : (params.f == 1) ? calcs.m2 : calcs.m3)"
layout:
  OneGraphPlusSidebar:
    graph:
      objects:
        - Contour:
            fn: "(4*sqrt((x))*(y))"
            level: calcs.z
            color: purple
            xMax: 11
            yMax: 11
            strokeWidth: 5
            show: (params.f == 0)
        - ContourMap:
            levels: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
            fn: "(4*sqrt((x))*(y))"
            xMax: 11
            yMax: 11
            show: (params.f == 0)
        - Contour:
            fn: "(2*(x) + 4*(y))"
            level: calcs.z
            color: purple
            xMin: -1
            xMax: 11
            yMin: -1
            yMax: 11
            strokeWidth: 5
            show: (params.f == 1)
        - ContourMap:
            levels: [8, 16, 24, 32, 40, 48, 56]
            fn: "(2*(x) + 4*(y))"
            xMin: -1
            xMax: 11
            yMin: -1
            yMax: 11
            show: (params.f == 1)
        - Contour:
            fn: "((x)^2 + (y)^2)"
            level: calcs.z
            color: purple
            xMin: -1
            xMax: 11
            yMin: -1
            yMax: 11
            strokeWidth: 5
            show: (params.f == 2)
        - ContourMap:
            levels: [25, 50, 75, 100, 125, 150, 175]
            fn: "((x)^2 + (y)^2)"
            xMin: -1
            xMax: 11
            yMin: -1
            yMax: 11
            show: (params.f == 2)
        - Label:
            coordinates: [calcs.x+0.1, calcs.x]
            text: "`\\\\text{Level set for } z=${calcs.z.toFixed(2)}`"
            color: purple
            position: bl
        - Label:
            coordinates: [10, 0]
            text: x
            yPixelOffset: -30
        - Label:
            coordinates: [0, 10]
            text: y
            xPixelOffset: -30
        - Point:
            coordinates: [params.x, params.y]
            drag:
            - horizontal: x
            - vertical: y
            droplines:
              vertical: params.x.toFixed(1)
              horizontal: params.y.toFixed(1)
        - Line:
            point: [params.x, params.y]
            slope: -calcs.m
            color: blue
            min: params.x - 2/sqrt(1 + calcs.m*calcs.m)
            max: params.x + 2/sqrt(1 + calcs.m*calcs.m)
            label:
              x: params.x + 2/sqrt(1 + calcs.m*calcs.m)
              text: "`\\\\text{slope} = -${calcs.m.toFixed(2)}`"
              position: tr
            drag:
              - directions: xy
                param: L
                expression: params.L + drag.dx


    sidebar:
      controls:
        - title: Slope along a Level Set
          description: The plot to the left shows the contour map for the selected function, as well as the level set passing through the point (x,y), and a line tangent to the level set at that point. Try dragging the point around!
          radioGroup:
            param: f
            options:
              - $f(x,y) = 4x^{1 \over 2}y$
              - $f(x,y) = 2x + 4y$
              - $f(x,y) = x^2 + y^2$
          divs:
            - html: "`$$f(${params.x.toFixed(1)}, ${params.y.toFixed(1)}) = ${calcs.z.toFixed(2)}$$`"
            - html: "`$$\\\\left.\\\\frac{dy}{dx}\\\\right|_{f(x,y) = f(${params.x.toFixed(1)}, ${params.y.toFixed(1)})} = -${calcs.m.toFixed(2)}$$`"

