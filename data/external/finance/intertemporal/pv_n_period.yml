---
schema: EconSchema
params:
  - {name: r, value: 0.5, min: 0, max: 1, round: 0.01}
  - {name: x, value: 10, min: 0, max: 10}
  - {name: n, value: 1, min: 1, max: 5}
  - {name: showInfinite, value: false}
calcs:
  pv1: (params.x/(1 + params.r))
  v2: (params.x*(1+params.r)^1)
  fv2: (calcs.v2 + params.x)
  pv2: (calcs.fv2/(1 + params.r)^2)
  v3: (calcs.fv2*(1+params.r))
  fv3: (calcs.v3 + params.x)
  pv3: (calcs.fv3/(1 + params.r)^3)
  v4: (calcs.fv3*(1+params.r))
  fv4: (calcs.v4 + params.x)
  pv4: (calcs.fv4/(1 + params.r)^4)
  v5: (calcs.fv4*(1+params.r))
  fv5: (calcs.v5 + params.x)
  pv5: (calcs.fv5/(1 + params.r)^5)
  pvi: (params.x/params.r)
  yAxisMax: (calcs.fv5*12/params.x)
layout:
  OneGraphPlusSidebar:
    graph:
      xAxis:
        min: 0
        max: "((params.n)*1.2)"
        title: Period
        ticks: params.n
      yAxis:
        min: 0
        max: calcs.yAxisMax
        ticks: 5
      objects:

        - Label:
            coordinates: [AXIS, calcs.yAxisMax]
            text: \$

        # Infinite Periods
        - Point:
            coordinates: [0, calcs.pvi]
            color: grey
            r: 4
            show: (params.showInfinite && params.r > 0)
            label:
              text: PV_\infty = {x \over r}
              position: l

        - Curve:
            fn: calcs.pvi*(1 + params.r)^(x)
            color: grey
            lineStyle: dotted
            show: (params.showInfinite && params.r > 0)

        # Period 1
        - Point:
            coordinates: [0, calcs.pv1]
            color: green
            r: 4
            show: (params.n == 1)
            label:
              text: "`PV_1 = ${calcs.pv1.toFixed(2)}`"
              position: l

        - Curve:
            fn: calcs.pv1*(1 + params.r)^(x)
            color: green
            max: 1
            lineStyle: dotted
            show: (params.n == 1)

        - Arrow:
            begin: [1, 0]
            end: [1, params.x]
            color: blue
            trim: 0.05
            label:
              text: "`+${params.x}`"
              position: r
              fontSize: 8

        - Point:
            coordinates: [1,params.x]
            r: 4
            draggable: true

        # Period 2

        - Point:
            coordinates: [0, calcs.pv2]
            color: green
            r: 4
            show: (params.n == 2)
            label:
              text: "`PV_2 = ${calcs.pv2.toFixed(2)}`"
              position: l

        - Curve:
            fn: calcs.pv2*(1 + params.r)^(x)
            color: green
            max: 2
            lineStyle: dotted
            show: (params.n == 2)

        - Curve:
            fn: params.x*(1 + params.r)^(x-1)
            min: 1
            max: 2
            show: (params.n > 1)

        - Point:
            coordinates: [2, calcs.v2]
            r: 4
            show: (params.n > 1)

        - Arrow:
            begin: [2, calcs.v2]
            end: [2, calcs.fv2]
            color: blue
            trim: 0.05
            show: (params.n > 1)
            label:
              text: "`+${params.x}`"
              position: r
              fontSize: 8

        - Point:
            coordinates: [2,calcs.fv2]
            r: 4
            show: (params.n > 1)

        # Period 3

        - Point:
            coordinates: [0, calcs.pv3]
            color: green
            r: 4
            show: (params.n == 3)
            label:
              text: "`PV_3 = ${calcs.pv3.toFixed(2)}`"
              position: l

        - Curve:
            fn: calcs.pv3*(1 + params.r)^(x)
            color: green
            max: 3
            lineStyle: dotted
            show: (params.n == 3)

        - Curve:
            fn: calcs.fv2*(1 + params.r)^(x-2)
            min: 2
            max: 3
            show: (params.n > 2)

        - Point:
            coordinates: [3, calcs.v3]
            r: 4
            show: (params.n > 2)

        - Arrow:
            begin: [3, calcs.v3]
            end: [3, calcs.fv3]
            color: blue
            trim: 0.05
            show: (params.n > 2)
            label:
              text: "`+${params.x}`"
              position: r
              fontSize: 8

        - Point:
            coordinates: [3,calcs.fv3]
            r: 4
            show: (params.n > 2)

        # Period 4

        - Point:
            coordinates: [0, calcs.pv4]
            color: green
            r: 4
            show: (params.n == 4)
            label:
              text: "`PV_4 = ${calcs.pv4.toFixed(2)}`"
              position: l

        - Curve:
            fn: calcs.pv4*(1 + params.r)^(x)
            color: green
            max: 4
            lineStyle: dotted
            show: (params.n == 4)

        - Curve:
            fn: calcs.fv3*(1 + params.r)^(x-3)
            min: 3
            max: 4
            show: (params.n > 3)

        - Point:
            coordinates: [4, calcs.v4]
            r: 4
            show: (params.n > 3)

        - Arrow:
            begin: [4, calcs.v4]
            end: [4, calcs.fv4]
            color: blue
            trim: 0.05
            show: (params.n > 3)
            label:
              text: "`+${params.x}`"
              position: r
              fontSize: 8

        - Point:
            coordinates: [4,calcs.fv4]
            r: 4
            show: (params.n > 3)

        # Period 5

        - Point:
            coordinates: [0, calcs.pv5]
            color: green
            r: 4
            show: (params.n == 5)
            label:
              text: "`PV_5 = ${calcs.pv5.toFixed(2)}`"
              position: l

        - Curve:
            fn: calcs.pv5*(1 + params.r)^(x)
            color: green
            max: 5
            lineStyle: dotted
            show: (params.n == 5)

        - Curve:
            fn: calcs.fv4*(1 + params.r)^(x-4)
            min: 4
            max: 5
            show: (params.n > 4)

        - Point:
            coordinates: [5, calcs.v5]
            r: 4
            show: (params.n > 4)

        - Arrow:
            begin: [5, calcs.v5]
            end: [5, calcs.fv5]
            color: blue
            trim: 0.05
            show: (params.n > 4)
            label:
              text: "`+${params.x}`"
              position: r
              fontSize: 8

        - Point:
            coordinates: [5,calcs.fv5]
            r: 4
            show: (params.n > 4)

    sidebar:
      controls:
        - title: Present Value for a Stream of Constant Payoffs
          description: This illustrates the present value of a payoff of <em>x</em>, starting one period in the future and ending <em>n</em> periods in the future, given an interest rate <em>r</em>.
          sliders:
            - param: x
              label: x
            - param: r
              label: r
            - param: n
              label: n
          checkboxes:
            - param: showInfinite
              label: \text{Show PV for }n=\infty
          divs:
            - html: "`<hr/>The theoretical limit of the PV as $n \\\\rightarrow \\\\infty$ is $$\\\\frac{x}{r} = \\\\frac{${params.x.toFixed(0)}}{${params.r.toFixed(2)}} = ${calcs.pvi.toFixed(2)}$$`"
              show: (params.showInfinite && params.r > 0)
            - html: <hr/>The theoretical limit of the PV as $n \rightarrow \infty$ is $\frac{x}{r}$. When $r = 0$, this is not well defined, since the value of a stream of infinite payments with no discounting is infinite!
              show: (params.showInfinite && params.r == 0)