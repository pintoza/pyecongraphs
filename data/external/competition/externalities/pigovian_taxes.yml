---
schema: EconSchema
version: 1
params:
- name: demandIntercept
  value: 120
  min: 20
  max: 140
  round: 1
- name: demandSlope
  value: -1
  min: -10
  max: 0.05
  round: 0.01
- name: supplyIntercept
  value: 0
  min: 0
  max: 150
  round: 1
- name: supplySlope
  value: 1
  min: 0
  max: 10
  round: 0.01
- name: externalityIntercept
  value: 10
  min: 0
  max: 100
  round: 1
- name: externalitySlope
  value: 0.2
  min: 0
  max: 10
  round: 0.01
- name: q
  value: 60
  min: 10
  max: 150
- name: tax
  value: 0
  min: 0
  max: 40
- name: showExt
  value: false
- name: showCS
  value: true
- name: showPS
  value: true
- name: showEC
  value: false
- name: showExcess
  value: false
calcs:
  equilibriumQuantity: "((params.demandIntercept + params.demandSlope*(params.supplyIntercept
    + params.tax))/(1 - params.demandSlope/params.supplySlope))"
  equilibriumConsumerPrice: "((calcs.equilibriumQuantity - params.demandIntercept)/params.demandSlope)"
  equilibriumFirmPrice: "(params.supplyIntercept + calcs.equilibriumQuantity/params.supplySlope)"
  optimalQuantity: "((params.demandIntercept + params.demandSlope*(params.supplyIntercept+params.externalityIntercept))/(1
    - params.demandSlope*(params.externalitySlope + 1/params.supplySlope)))"
  optimalConsumerPrice: "((calcs.optimalQuantity - params.demandIntercept)/params.demandSlope)"
layout:
  type: OneGraphPlusSidebar
  def:
    graph:
      xAxis:
        title: Quantity Produced and Consumed
        orient: bottom
        min: 0
        max: 150
      yAxis:
        title: Dollars per Unit
        orient: left
        min: 0
        max: 150
      objects:
      - type: Area
        def:
          univariateFunction1:
            fn: "(calcs.demand.yIntercept + calcs.demand.slope*(x))"
            min: "(params.showExcess ? Math.min(calcs.equilibriumQuantity, calcs.optimalQuantity)
              : 0)"
            max: calcs.equilibriumQuantity
          univariateFunction2:
            fn: calcs.equilibriumConsumerPrice
            min: "(params.showExcess ? Math.min(calcs.equilibriumQuantity, calcs.optimalQuantity)
              : 0)"
            max: calcs.equilibriumQuantity
          fill: colors.demand
          show: params.showCS
      - type: Area
        def:
          univariateFunction1:
            fn: "(calcs.supply.yIntercept + calcs.supply.slope*(x))"
            min: "(params.showExcess ? Math.min(calcs.equilibriumQuantity, calcs.optimalQuantity)
              : 0)"
            max: calcs.equilibriumQuantity
          univariateFunction2:
            fn: calcs.equilibriumFirmPrice
            min: "(params.showExcess ? Math.min(calcs.equilibriumQuantity, calcs.optimalQuantity)
              : 0)"
            max: calcs.equilibriumQuantity
          fill: colors.supply
          show: params.showPS
      - type: Area
        def:
          univariateFunction1:
            fn: "(calcs.socialCost.yIntercept + calcs.socialCost.slope*(x))"
            min: "(params.showExcess ? Math.min(calcs.equilibriumQuantity, calcs.optimalQuantity)
              : 0)"
            max: calcs.equilibriumQuantity
          univariateFunction2:
            fn: "(calcs.supply.yIntercept + calcs.supply.slope*(x))"
            min: "(params.showExcess ? Math.min(calcs.equilibriumQuantity, calcs.optimalQuantity)
              : 0)"
            max: calcs.equilibriumQuantity
          fill: colors.brown
          show: "(params.showEC && params.showExt)"
      - type: EconLinearDemand
        def:
          name: demand
          xIntercept: params.demandIntercept
          invSlope: params.demandSlope
          label:
            text: "'D = MB'"
            x: "(0.9*params.demandIntercept)"
          handles: true
          draggable: true
          strokeWidth: 4
      - type: EconLinearSupply
        def:
          name: supply
          yIntercept: params.supplyIntercept
          invSlope: params.supplySlope
          label:
            text: "'S = PMC'"
            x: 120
          handles: true
          draggable: true
          strokeWidth: 4
      - type: EconLinearSupply
        def:
          name: externality
          yIntercept: params.externalityIntercept
          slope: params.externalitySlope
          label:
            text: MEC
            x: 100
          color: colors.brown
          handles: true
          draggable: true
          strokeWidth: 4
          show: params.showExt
      - type: EconLinearSupply
        def:
          name: socialCost
          yIntercept: "(params.supplyIntercept + params.externalityIntercept)"
          slope: "(calcs.supply.slope + calcs.externality.slope)"
          label:
            text: SMC
            x: 100
          color: colors.red
          strokeWidth: 4
          show: params.showExt
      - type: EconLinearSupply
        def:
          name: tax
          yIntercept: params.supplyIntercept + params.tax
          invSlope: params.supplySlope
          label:
            text: "'S + tax'"
            x: 100
          lineStyle: dashed
          strokeWidth: 4
          show: "(params.tax > 0)"
      - type: Point
        def:
          color: colors.demand
          coordinates:
          - calcs.equilibriumQuantity
          - calcs.equilibriumConsumerPrice
          lineStyle: dotted
          droplines:
            horizontal: P^E_C
            vertical: Q^E
      - type: Point
        def:
          color: colors.green
          coordinates:
          - calcs.optimalQuantity
          - calcs.optimalConsumerPrice
          lineStyle: dotted
          droplines:
            horizontal: P^*_C
            vertical: Q^*
          show: params.showExt
    sidebar:
      controls:
      - title: Pigovian Tax
        sliders:
        - param: tax
          label: "\\text{Tax}"
        checkboxes:
        - param: showCS
          label: "\\text{Show Consumer Surplus }(CS)"
        - param: showPS
          label: "\\text{Show Producer Surplus }(PS)"
        - param: showExt
          label: "\\text{Negative Externality}"
        - param: showEC
          label: "\\text{Show External Cost }(EC)"
          show: params.showExt
        - param: showExcess
          label: "\\text{Just show surplus effects of overproduction}"
          show: params.showExt
        divs:
        - html: In the absence of an externality, the market equilibrium maximizes
            consumer and producer surplus.
